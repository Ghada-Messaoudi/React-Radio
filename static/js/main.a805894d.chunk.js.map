{"version":3,"sources":["components/Footer/footer.jsx","components/Header/header.jsx","components/StationControls/station-controls.jsx","components/StationItem/station-item.jsx","components/RadioContainer/radio-container.jsx","App.js","serviceWorker.js","index.js"],"names":["Footer","props","station","className","Header","state","icon","faChevronLeft","faPowerOff","Component","StationControls","faMinusCircle","src","alt","faPlusCircle","StationItem","this","onRadioSelection","onClick","handleStationSelection","activeStation","id","name","RadioContainer","stations","currentStation","setState","map","key","handleRadioSelected","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kYAYeA,G,YATA,SAAAC,GACb,OACE,gCACGA,EAAMC,SAAW,uBAAGC,UAAU,SAAb,qBAClB,uBAAGA,UAAU,kBAAkBF,EAAMC,Y,sBCgB5BE,E,2MAjBbC,MAAQ,G,wEAGN,OACE,gCACE,4BAAQF,UAAU,OAChB,kBAAC,IAAD,CAAiBA,UAAU,OAAOG,KAAMC,OAE1C,wCACA,4BAAQJ,UAAU,OAChB,kBAAC,IAAD,CAAiBA,UAAU,OAAOG,KAAME,Y,GAX7BC,aCwBNC,G,uNApBbL,MAAQ,G,wEAEN,OACE,yBAAKF,UAAU,oBACb,4BAAQA,UAAU,OAChB,kBAAC,IAAD,CAAiBA,UAAU,WAAWG,KAAMK,OAE9C,yBACEC,IAAI,kCACJT,UAAU,kBACVU,IAAI,KAEN,4BAAQV,UAAU,OAChB,kBAAC,IAAD,CAAiBA,UAAU,WAAWG,KAAMQ,Y,GAdxBL,cCiBfM,E,2MApBbV,MAAQ,G,sFAEeH,GACrBc,KAAKf,MAAMgB,iBAAiBf,K,+BAGpB,IAAD,OACCA,EAAYc,KAAKf,MAAjBC,QACR,OACE,yBAAKC,UAAU,OAAOe,QAAS,kBAAM,EAAKC,uBAAuBjB,KAC9Dc,KAAKf,MAAMmB,gBAAkBlB,EAAQmB,IAAM,kBAAC,EAAD,MAC5C,yBAAKlB,UAAU,QACb,6BAAMD,EAAQoB,MACd,6BAAK,gCAASpB,EAAQmB,W,GAdNZ,aC2CXc,E,2MAxCblB,MAAQ,CACNmB,SAAU,CACR,CAAEF,KAAM,WAAYD,GAAI,QACxB,CAAEC,KAAM,aAAcD,GAAI,SAC1B,CAAEC,KAAM,WAAYD,GAAI,QACxB,CAAEC,KAAM,aAAcD,GAAI,QAC1B,CAAEC,KAAM,aAAcD,GAAI,UAE5BI,eAAgB,CAAEH,KAAM,GAAID,GAAI,K,mFAGdI,GAClBT,KAAKU,SAAS,CAAED,qB,+BAGR,IAAD,OACP,OACE,yBAAKtB,UAAU,mBACb,kBAAC,EAAD,MACA,8BACE,wBAAIA,UAAU,gBACXa,KAAKX,MAAMmB,SAASG,KAAI,SAAAzB,GAAO,OAC9B,wBAAI0B,IAAK1B,EAAQmB,IACf,kBAAC,EAAD,CACEnB,QAASA,EACTkB,cAAe,EAAKf,MAAMoB,eAAeJ,GACzCJ,iBAAkB,SAAAQ,GAAc,OAC9B,EAAKI,oBAAoBJ,YAOrC,kBAAC,EAAD,CAAQvB,QAASc,KAAKX,MAAMoB,eAAeH,Y,GAnCtBb,aCMdqB,MARf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,QCKc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a805894d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./footer-styles.css\"\n\nconst Footer = props => {\n  return (\n    <footer>\n      {props.station && <p className=\"title\">CURRENTLY PLAYING</p>}\n      <p className=\"currentStation\">{props.station}</p>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport \"./header-styles.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPowerOff, faChevronLeft } from \"@fortawesome/fontawesome-free-solid\";\n\nclass Header extends Component {\n  state = {};\n\n  render() {\n    return (\n      <header>\n        <button className=\"btn\">\n          <FontAwesomeIcon className=\"icon\" icon={faChevronLeft} />\n        </button>\n        <h3>Stations</h3>\n        <button className=\"btn\">\n          <FontAwesomeIcon className=\"icon\" icon={faPowerOff} />\n        </button>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"./station-controls-styles.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPlusCircle,\n  faMinusCircle\n} from \"@fortawesome/fontawesome-free-solid\";\n\nclass StationControls extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"station-controls\">\n        <button className=\"btn\">\n          <FontAwesomeIcon className=\"controls\" icon={faMinusCircle} />\n        </button>\n        <img\n          src=\"https://via.placeholder.com/100\"\n          className=\"placeholder-img\"\n          alt=\"\"\n        />\n        <button className=\"btn\">\n          <FontAwesomeIcon className=\"controls\" icon={faPlusCircle} />\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default StationControls;\n","import React, { Component } from \"react\";\nimport './station-item-styles.css'\nimport StationControls from \"../StationControls/station-controls\";\n\nclass StationItem extends Component {\n  state = {};\n\n  handleStationSelection(station) {\n    this.props.onRadioSelection(station);\n  }\n\n  render() {\n    const { station } = this.props;\n    return (\n      <div className=\"item\" onClick={() => this.handleStationSelection(station)}>\n        {this.props.activeStation === station.id && <StationControls />}\n        <div className=\"name\">\n          <div>{station.name}</div>\n          <div><strong>{station.id}</strong></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default StationItem;\n","import React, { Component } from \"react\";\nimport \"./radio-container.css\";\nimport Footer from \"../Footer/footer\";\nimport Header from \"../Header/header\";\nimport StationItem from \"../StationItem/station-item\";\n\nclass RadioContainer extends Component {\n  state = {\n    stations: [\n      { name: \"Putin FM\", id: \"66.6\" },\n      { name: \"Dribble FM\", id: \"101.2\" },\n      { name: \"Dodge FM\", id: \"99.4\" },\n      { name: \"Ballads FM\", id: \"87.1\" },\n      { name: \"Maximum FM\", id: \"142.2\" }\n    ],\n    currentStation: { name: \"\", id: \"\" }\n  };\n\n  handleRadioSelected(currentStation) {\n    this.setState({ currentStation });\n  }\n\n  render() {\n    return (\n      <div className=\"radio-container\">\n        <Header />\n        <main>\n          <ul className=\"stationsList\">\n            {this.state.stations.map(station => (\n              <li key={station.id}>\n                <StationItem\n                  station={station}\n                  activeStation={this.state.currentStation.id}\n                  onRadioSelection={currentStation =>\n                    this.handleRadioSelected(currentStation)\n                  }\n                />\n              </li>\n            ))}\n          </ul>\n        </main>\n        <Footer station={this.state.currentStation.name} />\n      </div>\n    );\n  }\n}\n\nexport default RadioContainer;\n","import React from 'react';\nimport './App.css';\nimport RadioContainer from './components/RadioContainer/radio-container';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RadioContainer></RadioContainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}